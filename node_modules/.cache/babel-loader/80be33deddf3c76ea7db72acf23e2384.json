{"ast":null,"code":"var _jsxFileName = \"/home/zulh2605/catkin_ws/src/medibotv4_react/src/components/Map.jsx\";\nimport React, { Component } from \"react\";\nimport Config from \"../scripts/config\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Map extends Component {\n  constructor() {\n    super();\n    this.state = {\n      ros: null\n    };\n    this.view_map = this.view_map.bind(this);\n  }\n\n  init_connection() {\n    // eslint-disable-next-line\n    this.state.ros = new window.ROSLIB.Ros();\n    this.state.ros.on(\"connection\", () => {\n      console.info(\"Connection to ROS established! : MAP\");\n      this.setState({\n        connected: true\n      });\n    });\n    this.state.ros.on(\"close\", () => {\n      console.warn(\"Connection to ROS closed! : MAP\");\n      this.setState({\n        connected: false\n      }); //try to reconnect every 3 seconds\n\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT + \"\");\n        } catch (error) {\n          console.error(\"connection problem : MAP\");\n        }\n      }, Config.RECONNECTION_TIMER);\n    });\n\n    try {\n      this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT + \"\");\n    } catch (error) {\n      console.error(\"connection problem : MAP\");\n    }\n\n    this.state.ros.on(\"error\", error => {// console.log('Error connecting to ROS: ', error);\n    });\n  }\n\n  componentDidMount() {\n    this.init_connection();\n    this.view_map();\n  }\n\n  view_map() {\n    var viewer = new window.ROS2D.Viewer({\n      divID: \"nav_div\",\n      width: 640,\n      height: 480\n    });\n    var navClient = new window.NAV2D.OccupancyGridClientNav({\n      ros: this.state.ros,\n      rootObject: viewer.scene,\n      viewer: viewer,\n      serverName: \"/move_base\",\n      withOrientation: true\n    }); // // Setup the map client.\n    // var gridClient = new window.ROS2D.OccupancyGridClient({\n    //   ros : this.state.ros,\n    //   rootObject : viewer.scene\n    // });     \n    // // Scale the canvas to fit to the map\n    // gridClient.on('change', function(){\n    //   viewer.scaleToDimensions(gridClient.currentGrid.width, gridClient.currentGrid.height);\n    // });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"nav_div\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["/home/zulh2605/catkin_ws/src/medibotv4_react/src/components/Map.jsx"],"names":["React","Component","Config","Map","constructor","state","ros","view_map","bind","init_connection","window","ROSLIB","Ros","on","console","info","setState","connected","warn","setTimeout","connect","ROSBRIDGE_SERVER_IP","ROSBRIDGE_SERVER_PORT","error","RECONNECTION_TIMER","componentDidMount","viewer","ROS2D","Viewer","divID","width","height","navClient","NAV2D","OccupancyGridClientNav","rootObject","scene","serverName","withOrientation","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;;;AAEA,MAAMC,GAAN,SAAkBF,SAAlB,CAA4B;AAK3BG,EAAAA,WAAW,GAAE;AACZ;AADY,SAJbC,KAIa,GAJL;AACPC,MAAAA,GAAG,EAAG;AADC,KAIK;AAEZ,SAAKC,QAAL,GAAgB,KAAKA,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAAhB;AACA;;AAEDC,EAAAA,eAAe,GAAE;AAChB;AACA,SAAKJ,KAAL,CAAWC,GAAX,GAAiB,IAAII,MAAM,CAACC,MAAP,CAAcC,GAAlB,EAAjB;AAEA,SAAKP,KAAL,CAAWC,GAAX,CAAeO,EAAf,CAAkB,YAAlB,EAAgC,MAAM;AACrCC,MAAAA,OAAO,CAACC,IAAR,CAAa,sCAAb;AACA,WAAKC,QAAL,CAAc;AAACC,QAAAA,SAAS,EAAC;AAAX,OAAd;AACA,KAHD;AAKA,SAAKZ,KAAL,CAAWC,GAAX,CAAeO,EAAf,CAAkB,OAAlB,EAA2B,MAAM;AAChCC,MAAAA,OAAO,CAACI,IAAR,CAAa,iCAAb;AACA,WAAKF,QAAL,CAAc;AAACC,QAAAA,SAAS,EAAC;AAAX,OAAd,EAFgC,CAGhC;;AACAE,MAAAA,UAAU,CAAC,MAAI;AACd,YAAG;AACF,eAAKd,KAAL,CAAWC,GAAX,CAAec,OAAf,CACC,UAAQlB,MAAM,CAACmB,mBAAf,GAAmC,GAAnC,GAAuCnB,MAAM,CAACoB,qBAA9C,GAAoE,EADrE;AAGA,SAJD,CAIC,OAAMC,KAAN,EAAY;AACZT,UAAAA,OAAO,CAACS,KAAR,CAAc,0BAAd;AACA;AACD,OARS,EAQRrB,MAAM,CAACsB,kBARC,CAAV;AASA,KAbD;;AAeA,QAAG;AACF,WAAKnB,KAAL,CAAWC,GAAX,CAAec,OAAf,CACC,UAAQlB,MAAM,CAACmB,mBAAf,GAAmC,GAAnC,GAAuCnB,MAAM,CAACoB,qBAA9C,GAAoE,EADrE;AAGA,KAJD,CAIC,OAAMC,KAAN,EAAY;AACZT,MAAAA,OAAO,CAACS,KAAR,CAAc,0BAAd;AACA;;AAED,SAAKlB,KAAL,CAAWC,GAAX,CAAeO,EAAf,CAAkB,OAAlB,EAA4BU,KAAD,IAAW,CACrC;AACA,KAFD;AAGA;;AAEDE,EAAAA,iBAAiB,GAAE;AAClB,SAAKhB,eAAL;AACA,SAAKF,QAAL;AACA;;AAGDA,EAAAA,QAAQ,GAAE;AACT,QAAImB,MAAM,GAAG,IAAIhB,MAAM,CAACiB,KAAP,CAAaC,MAAjB,CAAwB;AACpCC,MAAAA,KAAK,EAAE,SAD6B;AAEpCC,MAAAA,KAAK,EAAE,GAF6B;AAGpCC,MAAAA,MAAM,EAAE;AAH4B,KAAxB,CAAb;AAMA,QAAIC,SAAS,GAAG,IAAItB,MAAM,CAACuB,KAAP,CAAaC,sBAAjB,CAAwC;AACvD5B,MAAAA,GAAG,EAAE,KAAKD,KAAL,CAAWC,GADuC;AAEvD6B,MAAAA,UAAU,EAAET,MAAM,CAACU,KAFoC;AAGvDV,MAAAA,MAAM,EAAEA,MAH+C;AAIvDW,MAAAA,UAAU,EAAE,YAJ2C;AAKvDC,MAAAA,eAAe,EAAE;AALsC,KAAxC,CAAhB,CAPS,CAeN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGH;;AAIDC,EAAAA,MAAM,GAAG;AACR,wBACC;AAAA,6BACC;AAAK,QAAA,EAAE,EAAC;AAAR;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,YADD;AAKA;;AAzF0B;;AA4F5B,eAAepC,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport Config from \"../scripts/config\";\n\nclass Map extends Component {\n\tstate = {\n\t\tros : null\n\t};\n\n\tconstructor(){\n\t\tsuper();\n\t\tthis.view_map = this.view_map.bind(this);\n\t}\n\n\tinit_connection(){\n\t\t// eslint-disable-next-line\n\t\tthis.state.ros = new window.ROSLIB.Ros();\n\n\t\tthis.state.ros.on(\"connection\", () => {\n\t\t\tconsole.info(\"Connection to ROS established! : MAP\");\n\t\t\tthis.setState({connected:true});\n\t\t});\n\n\t\tthis.state.ros.on(\"close\", () => {\n\t\t\tconsole.warn(\"Connection to ROS closed! : MAP\");\n\t\t\tthis.setState({connected:false});\n\t\t\t//try to reconnect every 3 seconds\n\t\t\tsetTimeout(()=>{\n\t\t\t\ttry{\n\t\t\t\t\tthis.state.ros.connect(\n\t\t\t\t\t\t\"ws://\"+Config.ROSBRIDGE_SERVER_IP+\":\"+Config.ROSBRIDGE_SERVER_PORT+\"\"\n\t\t\t\t\t);\n\t\t\t\t}catch(error){\n\t\t\t\t\tconsole.error(\"connection problem : MAP\");\n\t\t\t\t}\n\t\t\t},Config.RECONNECTION_TIMER);\n\t\t});\n\n\t\ttry{\n\t\t\tthis.state.ros.connect(\n\t\t\t\t\"ws://\"+Config.ROSBRIDGE_SERVER_IP+\":\"+Config.ROSBRIDGE_SERVER_PORT+\"\"\n\t\t\t);\n\t\t}catch(error){\n\t\t\tconsole.error(\"connection problem : MAP\");\n\t\t}\n\n\t\tthis.state.ros.on(\"error\", (error) => {\n\t\t\t// console.log('Error connecting to ROS: ', error);\n\t\t});\n\t}\n\n\tcomponentDidMount(){\n\t\tthis.init_connection();\n\t\tthis.view_map();\n\t}\n\n\n\tview_map(){\n\t\tvar viewer = new window.ROS2D.Viewer({\n\t\t\tdivID: \"nav_div\",\n\t\t\twidth: 640,\n\t\t\theight: 480\n\t\t});\n\n\t\tvar navClient = new window.NAV2D.OccupancyGridClientNav({\n\t\t\tros: this.state.ros,\n\t\t\trootObject: viewer.scene,\n\t\t\tviewer: viewer,\n\t\t\tserverName: \"/move_base\",\n\t\t\twithOrientation: true\n\t\t});\n\n\t    // // Setup the map client.\n\t    // var gridClient = new window.ROS2D.OccupancyGridClient({\n\t    //   ros : this.state.ros,\n\t    //   rootObject : viewer.scene\n\t    // });     \n\t    // // Scale the canvas to fit to the map\n\t    // gridClient.on('change', function(){\n\t    //   viewer.scaleToDimensions(gridClient.currentGrid.width, gridClient.currentGrid.height);\n\t    // });\n\n\n\t}\n\n\n\n\trender() {\n\t\treturn ( \n\t\t\t<div>\n\t\t\t\t<div id=\"nav_div\"></div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Map;"]},"metadata":{},"sourceType":"module"}