{"ast":null,"code":"var _jsxFileName = \"/home/zulh2605/Desktop/medibotv4-web/src/components/RobotState.jsx\";\nimport React, { Component } from \"react\";\nimport { Row, Col, Container, Button } from \"react-bootstrap\";\nimport Config from \"../scripts/config\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass RobotState extends Component {\n  constructor() {\n    super();\n    this.state = {\n      ros: null,\n      x: 0,\n      y: 0,\n      orientation: 0,\n      linear_velocity: 0,\n      angular_velocity: 0\n    };\n    this.pose_subscriber = new window.ROSLIB.Topic({\n      ros: this.state.ros\n    });\n    this.init_connection();\n  }\n\n  init_connection() {\n    // eslint-disable-next-line\n    this.state.ros = new window.ROSLIB.Ros();\n    this.state.ros.on(\"connection\", () => {\n      console.log(\"Connection to websocket server established!\");\n      this.setState({\n        connected: true\n      });\n    });\n    this.state.ros.on(\"close\", () => {\n      console.log(\"Connection to websocket server closed!\");\n      this.setState({\n        connected: false\n      }); //try to reconnect every 3 seconds\n\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT + \"\");\n        } catch (error) {\n          console.log(\"connection problem\");\n        }\n      }, Config.RECONNECTION_TIMER);\n    });\n\n    try {\n      this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT + \"\");\n    } catch (error) {\n      console.log(\"connection problem\");\n    }\n\n    this.state.ros.on(\"error\", error => {// console.log('Error connecting to websocket server: ', error);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"mt-4\",\n            children: \"Position\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"mt-0\",\n            children: [\"x : \", this.state.x]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"mt-0\",\n            children: [\"y : \", this.state.x]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"mt-0\",\n            children: [\"Orientation : \", this.state.orientation]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"mt-4\",\n            children: \"Velocity\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"mt-0\",\n            children: [\"Linear : \", this.state.linear_velocity]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"mt-0\",\n            children: [\"Angular : \", this.state.angular_velocity]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default RobotState;","map":{"version":3,"sources":["/home/zulh2605/Desktop/medibotv4-web/src/components/RobotState.jsx"],"names":["React","Component","Row","Col","Container","Button","Config","RobotState","constructor","state","ros","x","y","orientation","linear_velocity","angular_velocity","pose_subscriber","window","ROSLIB","Topic","init_connection","Ros","on","console","log","setState","connected","setTimeout","connect","ROSBRIDGE_SERVER_IP","ROSBRIDGE_SERVER_PORT","error","RECONNECTION_TIMER","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport {Row, Col, Container, Button} from \"react-bootstrap\";\nimport Config from \"../scripts/config\";\n\nclass RobotState extends Component {\n\tstate = {\n\t\tros:null,\n\t\tx:0,\n\t\ty:0,\n\t\torientation:0,\n\t\tlinear_velocity:0,\n\t\tangular_velocity:0\n\t};\n\n\tconstructor(){\n\t\tsuper();\n\t\tthis.init_connection();\n\t}\n\n\tinit_connection(){\n\t\t// eslint-disable-next-line\n\t\tthis.state.ros = new window.ROSLIB.Ros();\n\n\t\tthis.state.ros.on(\"connection\", () => {\n\t\t\tconsole.log(\"Connection to websocket server established!\");\n\t\t\tthis.setState({connected:true});\n\t\t});\n\n\t\tthis.state.ros.on(\"close\", () => {\n\t\t\tconsole.log(\"Connection to websocket server closed!\");\n\t\t\tthis.setState({connected:false});\n\t\t\t//try to reconnect every 3 seconds\n\t\t\tsetTimeout(()=>{\n\t\t\t\ttry{\n\t\t\t\t\tthis.state.ros.connect(\n\t\t\t\t\t\t\"ws://\"+Config.ROSBRIDGE_SERVER_IP+\":\"+Config.ROSBRIDGE_SERVER_PORT+\"\"\n\t\t\t\t\t);\n\t\t\t\t}catch(error){\n\t\t\t\t\tconsole.log(\"connection problem\");\n\t\t\t\t}\n\t\t\t},Config.RECONNECTION_TIMER);\n\t\t});\n\n\t\ttry{\n\t\t\tthis.state.ros.connect(\n\t\t\t\t\"ws://\"+Config.ROSBRIDGE_SERVER_IP+\":\"+Config.ROSBRIDGE_SERVER_PORT+\"\"\n\t\t\t);\n\t\t}catch(error){\n\t\t\tconsole.log(\"connection problem\");\n\t\t}\n\n\t\tthis.state.ros.on(\"error\", (error) => {\n\t\t\t// console.log('Error connecting to websocket server: ', error);\n\t\t});\n\t}\n\n\tpose_subscriber = new window.ROSLIB.Topic({\n\t\tros : this.state.ros\n\t});\n\n\trender() {\n\t\treturn ( \n\t\t\t<div>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<h4 className=\"mt-4\">Position</h4>\n\t\t\t\t\t\t<p className=\"mt-0\">x : {this.state.x}</p>\n\t\t\t\t\t\t<p className=\"mt-0\">y : {this.state.x}</p>\n\t\t\t\t\t\t<p className=\"mt-0\">Orientation : {this.state.orientation}</p>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<h4 className=\"mt-4\">Velocity</h4>\n\t\t\t\t\t\t<p className=\"mt-0\">Linear : {this.state.linear_velocity}</p>\n\t\t\t\t\t\t<p className=\"mt-0\">Angular : {this.state.angular_velocity}</p>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default RobotState;"]},"metadata":{},"sourceType":"module"}