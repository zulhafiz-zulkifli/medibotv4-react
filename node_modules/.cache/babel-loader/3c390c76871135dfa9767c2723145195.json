{"ast":null,"code":"var _jsxFileName = \"/home/zulh2605/catkin_ws/src/medibotv4_react/src/components/Map.jsx\";\nimport React, { Component } from \"react\";\nimport Config from \"../scripts/config\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Map extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {// ros : null\n    };\n  }\n\n  // constructor(){\n  // \tsuper();\n  // \tthis.init_connection();\n  // }\n  // init_connection(){\n  // \t// eslint-disable-next-line\n  // \tthis.state.ros = new window.ROSLIB.Ros();\n  // \tthis.state.ros.on(\"connection\", () => {\n  // \t\tconsole.log(\"Connection to websocket server established!\");\n  // \t\tthis.setState({connected:true});\n  // \t});\n  // \tthis.state.ros.on(\"close\", () => {\n  // \t\tconsole.log(\"Connection to websocket server closed!\");\n  // \t\tthis.setState({connected:false});\n  // \t\t//try to reconnect every 3 seconds\n  // \t\tsetTimeout(()=>{\n  // \t\t\ttry{\n  // \t\t\t\tthis.state.ros.connect(\n  // \t\t\t\t\t\"ws://\"+Config.ROSBRIDGE_SERVER_IP+\":\"+Config.ROSBRIDGE_SERVER_PORT+\"\"\n  // \t\t\t\t);\n  // \t\t\t}catch(error){\n  // \t\t\t\tconsole.log(\"connection problem\");\n  // \t\t\t}\n  // \t\t},Config.RECONNECTION_TIMER);\n  // \t});\n  // \ttry{\n  // \t\tthis.state.ros.connect(\n  // \t\t\t\"ws://\"+Config.ROSBRIDGE_SERVER_IP+\":\"+Config.ROSBRIDGE_SERVER_PORT+\"\"\n  // \t\t);\n  // \t}catch(error){\n  // \t\tconsole.log(\"connection problem\");\n  // \t}\n  // \tthis.state.ros.on(\"error\", (error) => {\n  // \t\t// console.log('Error connecting to websocket server: ', error);\n  // \t});\n  // }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"MAP COMPONENT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["/home/zulh2605/catkin_ws/src/medibotv4_react/src/components/Map.jsx"],"names":["React","Component","Config","Map","state","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;;;AAEA,MAAMC,GAAN,SAAkBF,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC3BG,KAD2B,GACnB,CACP;AADO,KADmB;AAAA;;AAK3B;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIAC,EAAAA,MAAM,GAAG;AACR,wBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADD;AAKA;;AAvD0B;;AA0D5B,eAAeF,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport Config from \"../scripts/config\";\n\nclass Map extends Component {\n\tstate = {\n\t\t// ros : null\n\t};\n\n\t// constructor(){\n\t// \tsuper();\n\t// \tthis.init_connection();\n\t// }\n\n\t// init_connection(){\n\t// \t// eslint-disable-next-line\n\t// \tthis.state.ros = new window.ROSLIB.Ros();\n\n\t// \tthis.state.ros.on(\"connection\", () => {\n\t// \t\tconsole.log(\"Connection to websocket server established!\");\n\t// \t\tthis.setState({connected:true});\n\t// \t});\n\n\t// \tthis.state.ros.on(\"close\", () => {\n\t// \t\tconsole.log(\"Connection to websocket server closed!\");\n\t// \t\tthis.setState({connected:false});\n\t// \t\t//try to reconnect every 3 seconds\n\t// \t\tsetTimeout(()=>{\n\t// \t\t\ttry{\n\t// \t\t\t\tthis.state.ros.connect(\n\t// \t\t\t\t\t\"ws://\"+Config.ROSBRIDGE_SERVER_IP+\":\"+Config.ROSBRIDGE_SERVER_PORT+\"\"\n\t// \t\t\t\t);\n\t// \t\t\t}catch(error){\n\t// \t\t\t\tconsole.log(\"connection problem\");\n\t// \t\t\t}\n\t// \t\t},Config.RECONNECTION_TIMER);\n\t// \t});\n\n\t// \ttry{\n\t// \t\tthis.state.ros.connect(\n\t// \t\t\t\"ws://\"+Config.ROSBRIDGE_SERVER_IP+\":\"+Config.ROSBRIDGE_SERVER_PORT+\"\"\n\t// \t\t);\n\t// \t}catch(error){\n\t// \t\tconsole.log(\"connection problem\");\n\t// \t}\n\n\t// \tthis.state.ros.on(\"error\", (error) => {\n\t// \t\t// console.log('Error connecting to websocket server: ', error);\n\t// \t});\n\t// }\n\n\n\n\trender() {\n\t\treturn ( \n\t\t\t<div>\n\t\t\t\tMAP COMPONENT\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Map;"]},"metadata":{},"sourceType":"module"}