{"ast":null,"code":"// import React, { Component } from \"react\";\n// import { Joystick } from \"react-joystick-component\";\n// import Config from \"../scripts/config\";\n// class Teleoperation extends Component {\n// \tstate = {\n// \t\tros : null\n// \t};\n// \tconstructor(){\n// \t\tsuper();\n// \t\tthis.init_connection();\n// \t}\n// \tinit_connection(){\n// \t\t// eslint-disable-next-line\n// \t\tthis.state.ros = new window.ROSLIB.Ros();\n// \t\tthis.state.ros.on(\"connection\", () => {\n// \t\t\tconsole.log(\"Connection to websocket server established!\");\n// \t\t\tthis.setState({connected:true});\n// \t\t});\n// \t\tthis.state.ros.on(\"close\", () => {\n// \t\t\tconsole.log(\"Connection to websocket server closed!\");\n// \t\t\tthis.setState({connected:false});\n// \t\t\t//try to reconnect every 3 seconds\n// \t\t\tsetTimeout(()=>{\n// \t\t\t\ttry{\n// \t\t\t\t\tthis.state.ros.connect(\n// \t\t\t\t\t\t\"ws://\"+Config.ROSBRIDGE_SERVER_IP+\":\"+Config.ROSBRIDGE_SERVER_PORT+\"\"\n// \t\t\t\t\t);\n// \t\t\t\t}catch(error){\n// \t\t\t\t\tconsole.log(\"connection problem\");\n// \t\t\t\t}\n// \t\t\t},Config.RECONNECTION_TIMER);\n// \t\t});\n// \t\ttry{\n// \t\t\tthis.state.ros.connect(\n// \t\t\t\t\"ws://\"+Config.ROSBRIDGE_SERVER_IP+\":\"+Config.ROSBRIDGE_SERVER_PORT+\"\"\n// \t\t\t);\n// \t\t}catch(error){\n// \t\t\tconsole.log(\"connection problem\");\n// \t\t}\n// \t\tthis.state.ros.on(\"error\", (error) => {\n// \t\t\t// console.log('Error connecting to websocket server: ', error);\n// \t\t});\n// \t}\n// \thandleMove(){\n// \t\tconsole.log(\"handle move\");\n// \t\t//create a ROS publisher to /cmd_vel\n// \t\tvar cmd_vel = new window.ROSLIB.Topic({\n// \t\t\tros: this.state.ros,\n// \t\t});\n// \t\t//create twist message to be published\n// \t\t//publish the message to /cmd_vel\n// \t}\n// \thandleStop(){\n// \t\tconsole.log(\"handle stop\");\n// \t}\n// \trender() {\n// \t\treturn ( \n// \t\t\t<div>\n// \t\t\t\t<Joystick \n// \t\t\t\tsize={100} \n// \t\t\t\tbaseColor=\"#EEEEEE\" \n// \t\t\t\tstickColor=\"#BBBBBB\" \n// \t\t\t\tmove={this.handleMove} \n// \t\t\t\tstop={this.handleStop}\n// \t\t\t\t></Joystick>\n// \t\t\t</div>\n// \t\t);\n// \t}\n// }\n// export default Teleoperation;","map":{"version":3,"sources":["/home/zulh2605/Desktop/medibotv4-web/src/components/Teleoperation.jsx"],"names":[],"mappings":"AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// import React, { Component } from \"react\";\n// import { Joystick } from \"react-joystick-component\";\n// import Config from \"../scripts/config\";\n\n// class Teleoperation extends Component {\n// \tstate = {\n// \t\tros : null\n// \t};\n\n// \tconstructor(){\n// \t\tsuper();\n// \t\tthis.init_connection();\n// \t}\n\n// \tinit_connection(){\n// \t\t// eslint-disable-next-line\n// \t\tthis.state.ros = new window.ROSLIB.Ros();\n\n// \t\tthis.state.ros.on(\"connection\", () => {\n// \t\t\tconsole.log(\"Connection to websocket server established!\");\n// \t\t\tthis.setState({connected:true});\n// \t\t});\n\n// \t\tthis.state.ros.on(\"close\", () => {\n// \t\t\tconsole.log(\"Connection to websocket server closed!\");\n// \t\t\tthis.setState({connected:false});\n// \t\t\t//try to reconnect every 3 seconds\n// \t\t\tsetTimeout(()=>{\n// \t\t\t\ttry{\n// \t\t\t\t\tthis.state.ros.connect(\n// \t\t\t\t\t\t\"ws://\"+Config.ROSBRIDGE_SERVER_IP+\":\"+Config.ROSBRIDGE_SERVER_PORT+\"\"\n// \t\t\t\t\t);\n// \t\t\t\t}catch(error){\n// \t\t\t\t\tconsole.log(\"connection problem\");\n// \t\t\t\t}\n// \t\t\t},Config.RECONNECTION_TIMER);\n// \t\t});\n\n// \t\ttry{\n// \t\t\tthis.state.ros.connect(\n// \t\t\t\t\"ws://\"+Config.ROSBRIDGE_SERVER_IP+\":\"+Config.ROSBRIDGE_SERVER_PORT+\"\"\n// \t\t\t);\n// \t\t}catch(error){\n// \t\t\tconsole.log(\"connection problem\");\n// \t\t}\n\n// \t\tthis.state.ros.on(\"error\", (error) => {\n// \t\t\t// console.log('Error connecting to websocket server: ', error);\n// \t\t});\n// \t}\n\n// \thandleMove(){\n// \t\tconsole.log(\"handle move\");\n// \t\t//create a ROS publisher to /cmd_vel\n// \t\tvar cmd_vel = new window.ROSLIB.Topic({\n// \t\t\tros: this.state.ros,\n// \t\t});\n// \t\t//create twist message to be published\n\n// \t\t//publish the message to /cmd_vel\n\n// \t}\n\n// \thandleStop(){\n// \t\tconsole.log(\"handle stop\");\n// \t}\n\n// \trender() {\n// \t\treturn ( \n// \t\t\t<div>\n// \t\t\t\t<Joystick \n// \t\t\t\tsize={100} \n// \t\t\t\tbaseColor=\"#EEEEEE\" \n// \t\t\t\tstickColor=\"#BBBBBB\" \n// \t\t\t\tmove={this.handleMove} \n// \t\t\t\tstop={this.handleStop}\n// \t\t\t\t></Joystick>\n// \t\t\t</div>\n// \t\t);\n// \t}\n// }\n\n// export default Teleoperation;"]},"metadata":{},"sourceType":"module"}