{"ast":null,"code":"var _jsxFileName = \"/home/zulh2605/Desktop/medibotv4-web/src/components/Teleoperation.jsx\";\nimport React, { Component } from \"react\";\nimport { Joystick } from \"react-joystick-component\";\nimport Config from \"../scripts/config\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Teleoperation extends Component {\n  constructor() {\n    super();\n    this.state = {\n      ros: null\n    };\n    this.init_connection();\n  }\n\n  init_connection() {\n    // eslint-disable-next-line\n    this.state.ros = new window.ROSLIB.Ros();\n    this.state.ros.on(\"connection\", () => {\n      console.log(\"Connection to websocket server established!\");\n      this.setState({\n        connected: true\n      });\n    });\n    this.state.ros.on(\"close\", () => {\n      console.log(\"Connection to websocket server closed!\");\n      this.setState({\n        connected: false\n      }); //try to reconnect every 3 seconds\n\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT + \"\");\n        } catch (error) {\n          console.log(\"connection problem\");\n        }\n      }, Config.RECONNECTION_TIMER);\n    });\n\n    try {\n      this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT + \"\");\n    } catch (error) {\n      console.log(\"connection problem\");\n    }\n\n    this.state.ros.on(\"error\", error => {// console.log('Error connecting to websocket server: ', error);\n    });\n  }\n\n  handleMove() {\n    console.log(\"handle move\"); //create a ROS publisher to /cmd_vel\n\n    var cmd_vel = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: Config.CMD_VEL_TOPIC,\n      messageType: \"geometry_msgs/Twist\"\n    }); //create twist message to be published\n    //publish the message to /cmd_vel\n  }\n\n  handleStop() {\n    console.log(\"handle stop\");\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Joystick, {\n        size: 100,\n        baseColor: \"#EEEEEE\",\n        stickColor: \"#BBBBBB\",\n        move: this.handleMove,\n        stop: this.handleStop\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default Teleoperation;","map":{"version":3,"sources":["/home/zulh2605/Desktop/medibotv4-web/src/components/Teleoperation.jsx"],"names":["React","Component","Joystick","Config","Teleoperation","constructor","state","ros","init_connection","window","ROSLIB","Ros","on","console","log","setState","connected","setTimeout","connect","ROSBRIDGE_SERVER_IP","ROSBRIDGE_SERVER_PORT","error","RECONNECTION_TIMER","handleMove","cmd_vel","Topic","name","CMD_VEL_TOPIC","messageType","handleStop","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,QAAyB,0BAAzB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;;;AAEA,MAAMC,aAAN,SAA4BH,SAA5B,CAAsC;AAKrCI,EAAAA,WAAW,GAAE;AACZ;AADY,SAJbC,KAIa,GAJL;AACPC,MAAAA,GAAG,EAAG;AADC,KAIK;AAEZ,SAAKC,eAAL;AACA;;AAEDA,EAAAA,eAAe,GAAE;AAChB;AACA,SAAKF,KAAL,CAAWC,GAAX,GAAiB,IAAIE,MAAM,CAACC,MAAP,CAAcC,GAAlB,EAAjB;AAEA,SAAKL,KAAL,CAAWC,GAAX,CAAeK,EAAf,CAAkB,YAAlB,EAAgC,MAAM;AACrCC,MAAAA,OAAO,CAACC,GAAR,CAAY,6CAAZ;AACA,WAAKC,QAAL,CAAc;AAACC,QAAAA,SAAS,EAAC;AAAX,OAAd;AACA,KAHD;AAKA,SAAKV,KAAL,CAAWC,GAAX,CAAeK,EAAf,CAAkB,OAAlB,EAA2B,MAAM;AAChCC,MAAAA,OAAO,CAACC,GAAR,CAAY,wCAAZ;AACA,WAAKC,QAAL,CAAc;AAACC,QAAAA,SAAS,EAAC;AAAX,OAAd,EAFgC,CAGhC;;AACAC,MAAAA,UAAU,CAAC,MAAI;AACd,YAAG;AACF,eAAKX,KAAL,CAAWC,GAAX,CAAeW,OAAf,CACC,UAAQf,MAAM,CAACgB,mBAAf,GAAmC,GAAnC,GAAuChB,MAAM,CAACiB,qBAA9C,GAAoE,EADrE;AAGA,SAJD,CAIC,OAAMC,KAAN,EAAY;AACZR,UAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACA;AACD,OARS,EAQRX,MAAM,CAACmB,kBARC,CAAV;AASA,KAbD;;AAeA,QAAG;AACF,WAAKhB,KAAL,CAAWC,GAAX,CAAeW,OAAf,CACC,UAAQf,MAAM,CAACgB,mBAAf,GAAmC,GAAnC,GAAuChB,MAAM,CAACiB,qBAA9C,GAAoE,EADrE;AAGA,KAJD,CAIC,OAAMC,KAAN,EAAY;AACZR,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACA;;AAED,SAAKR,KAAL,CAAWC,GAAX,CAAeK,EAAf,CAAkB,OAAlB,EAA4BS,KAAD,IAAW,CACrC;AACA,KAFD;AAGA;;AAEDE,EAAAA,UAAU,GAAE;AACXV,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EADW,CAEX;;AACA,QAAIU,OAAO,GAAG,IAAIf,MAAM,CAACC,MAAP,CAAce,KAAlB,CAAwB;AACrClB,MAAAA,GAAG,EAAE,KAAKD,KAAL,CAAWC,GADqB;AAErCmB,MAAAA,IAAI,EAAEvB,MAAM,CAACwB,aAFwB;AAGrCC,MAAAA,WAAW,EAAE;AAHwB,KAAxB,CAAd,CAHW,CAQX;AAEA;AAEA;;AAEDC,EAAAA,UAAU,GAAE;AACXhB,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACA;;AAEDgB,EAAAA,MAAM,GAAG;AACR,wBACC;AAAA,6BACC,QAAC,QAAD;AACA,QAAA,IAAI,EAAE,GADN;AAEA,QAAA,SAAS,EAAC,SAFV;AAGA,QAAA,UAAU,EAAC,SAHX;AAIA,QAAA,IAAI,EAAE,KAAKP,UAJX;AAKA,QAAA,IAAI,EAAE,KAAKM;AALX;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,YADD;AAWA;;AA7EoC;;AAgFtC,eAAezB,aAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { Joystick } from \"react-joystick-component\";\nimport Config from \"../scripts/config\";\n\nclass Teleoperation extends Component {\n\tstate = {\n\t\tros : null\n\t};\n\n\tconstructor(){\n\t\tsuper();\n\t\tthis.init_connection();\n\t}\n\n\tinit_connection(){\n\t\t// eslint-disable-next-line\n\t\tthis.state.ros = new window.ROSLIB.Ros();\n\n\t\tthis.state.ros.on(\"connection\", () => {\n\t\t\tconsole.log(\"Connection to websocket server established!\");\n\t\t\tthis.setState({connected:true});\n\t\t});\n\n\t\tthis.state.ros.on(\"close\", () => {\n\t\t\tconsole.log(\"Connection to websocket server closed!\");\n\t\t\tthis.setState({connected:false});\n\t\t\t//try to reconnect every 3 seconds\n\t\t\tsetTimeout(()=>{\n\t\t\t\ttry{\n\t\t\t\t\tthis.state.ros.connect(\n\t\t\t\t\t\t\"ws://\"+Config.ROSBRIDGE_SERVER_IP+\":\"+Config.ROSBRIDGE_SERVER_PORT+\"\"\n\t\t\t\t\t);\n\t\t\t\t}catch(error){\n\t\t\t\t\tconsole.log(\"connection problem\");\n\t\t\t\t}\n\t\t\t},Config.RECONNECTION_TIMER);\n\t\t});\n\n\t\ttry{\n\t\t\tthis.state.ros.connect(\n\t\t\t\t\"ws://\"+Config.ROSBRIDGE_SERVER_IP+\":\"+Config.ROSBRIDGE_SERVER_PORT+\"\"\n\t\t\t);\n\t\t}catch(error){\n\t\t\tconsole.log(\"connection problem\");\n\t\t}\n\n\t\tthis.state.ros.on(\"error\", (error) => {\n\t\t\t// console.log('Error connecting to websocket server: ', error);\n\t\t});\n\t}\n\n\thandleMove(){\n\t\tconsole.log(\"handle move\");\n\t\t//create a ROS publisher to /cmd_vel\n\t\tvar cmd_vel = new window.ROSLIB.Topic({\n\t\t\tros: this.state.ros,\n\t\t\tname: Config.CMD_VEL_TOPIC,\n\t\t\tmessageType: \"geometry_msgs/Twist\"\n\t\t});\n\t\t//create twist message to be published\n\n\t\t//publish the message to /cmd_vel\n\n\t}\n\n\thandleStop(){\n\t\tconsole.log(\"handle stop\");\n\t}\n\n\trender() {\n\t\treturn ( \n\t\t\t<div>\n\t\t\t\t<Joystick \n\t\t\t\tsize={100} \n\t\t\t\tbaseColor=\"#EEEEEE\" \n\t\t\t\tstickColor=\"#BBBBBB\" \n\t\t\t\tmove={this.handleMove} \n\t\t\t\tstop={this.handleStop}\n\t\t\t\t></Joystick>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Teleoperation;"]},"metadata":{},"sourceType":"module"}